name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Build binaries
      run: |
        # Create build directory
        mkdir -p dist
        
        # Build for different architectures
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.VERSION=${{ steps.version.outputs.VERSION }}" -o dist/gex-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.VERSION=${{ steps.version.outputs.VERSION }}" -o dist/gex-linux-arm64 .
        GOOS=linux GOARCH=386 go build -ldflags="-s -w -X main.VERSION=${{ steps.version.outputs.VERSION }}" -o dist/gex-linux-386 .
        
        # Make binaries executable
        chmod +x dist/*
        
    - name: Create archives
      run: |
        cd dist
        
        # Create tar.gz archives for each binary
        tar -czf gex-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz gex-linux-amd64 -C .. install.sh README.md
        tar -czf gex-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz gex-linux-arm64 -C .. install.sh README.md
        tar -czf gex-${{ steps.version.outputs.VERSION }}-linux-386.tar.gz gex-linux-386 -C .. install.sh README.md
        
        # Create checksums
        sha256sum *.tar.gz > checksums.txt
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # Gex Shell ${{ steps.version.outputs.VERSION }}
        Linux shell written in Go.
        
        ## 📦 Installation
        
        ### Quick Install
        \`\`\`bash
        curl -fsSL https://raw.githubusercontent.com/dmitryzhvinklis/gex/main/install.sh | bash
        \`\`\`
        
        ### Manual Install
        1. Download the appropriate binary for your architecture
        2. Extract the archive
        3. Run the installer: \`./install.sh\`
        
        ## 🔧 Usage
        
        \`\`\`bash
        # Start the shell
        gex
        
        # Run a command
        gex -c "echo 'Hello, World!'"
        
        # Get help
        gex -c "help"
        \`\`\`
        
        ## 📊 Performance
        
        - Startup time: ~50-100ms
        - Memory usage: ~5-10MB
        - Built with Go ${{ steps.go-version.outputs.go-version }}
        
        ## 🐛 Bug Fixes
        
        - Improved command parsing performance
        - Fixed memory leaks in history management
        - Enhanced error handling
        - Better signal handling
        
        ## 📈 Improvements
        
        - Optimized object pooling
        - Enhanced caching mechanisms
        - Better readline implementation
        - Improved tab completion
        
        ---
        
        **Full Changelog**: https://github.com/dmitryzhvinklis/gex/compare/v1.0.0...${{ steps.version.outputs.VERSION }}
        EOF
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Gex Shell ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          dist/*.tar.gz
          dist/checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run tests
      run: |
        go mod tidy
        go test -v ./...
        
    - name: Build test
      run: |
        go build -o gex-test .
        
    - name: Basic functionality test
      run: |
        echo "help" | ./gex-test
        echo "pwd" | ./gex-test
        echo "echo 'Test successful'" | ./gex-test
        
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run benchmarks
      run: |
        go mod tidy
        go test -bench=. -benchmem ./... || echo "No benchmarks found"
        
    - name: Performance test
      run: |
        go build -o gex-perf .
        
        # Measure startup time
        start_time=$(date +%s%N)
        echo "exit" | ./gex-perf > /dev/null 2>&1
        end_time=$(date +%s%N)
        startup_time=$(( (end_time - start_time) / 1000000 ))
        
        echo "Startup time: ${startup_time}ms"
        
        # Test should complete in reasonable time
        if [ $startup_time -gt 1000 ]; then
          echo "Warning: Startup time is high (${startup_time}ms)"
        else
          echo "✅ Performance test passed"
        fi
